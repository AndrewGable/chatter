Andrew Gable - README 
Cloud Computing CS 497 - Dr. Dialani
Programming Assignment 1 - Chatter

Database Build:

1. Create a user in mysql with username = root and password = pass
2. Create a database called chatterDB
(mysqladmin -uroot -ppass create chatterDB)
3. Create all the tables for chatterDB
(mysql -uroot -ppass chatterDB < ChatterDBCreate.sql)

Project Build:

1. Run 'mvn clean package'
2. Change directories to 'target/'
3. Project was built as 'ROOT.war'
(Why ROOT.war? It enables me to deploy Chatter to local host root and not as localhost:8080/Chatter/
*Please* keep this the same because all jQuery calls are assuming this naming convention.)
4. Copy 'ROOT.war' to tomcat deployment directory or deploy using the tomcat manager
5. Browse to root (http://localhost:8080/) and Chatter should load (Should see a big picture of a guy with a surfboard)

Project Structure:

pom.xml - Various build dependencies and plugins used to build Chatter
ChatterDBCreate.sql - Database table builds
com.andrewcode.rest
    - Controllers
        -- FriendService.Java Handles all of the friendships and followers rest calls
        -- TweetService.java Handles all of the tweet related rest calls
        -- UserService.java Handles the creation and login of users
    - Models
        -- Friends.java Hibernate annotated model of table in MySql database
        -- Tweet.java Hibernate annotated model of table in MySql database
        -- User.java Hibernate annotated model of table in MySql database
    - Util
        -- FriendException.java Exception handling for FriendService.java
        -- TweetException.java Exception handling for TweetService.java
        -- UserException.java Exception handing for UserService.java
        -- Utils.java Static helper methods that I did not want to copy over and over again
Resources
    - hibernate.cfg.xml Hibernate connector for hibernate orm library
Webapp
    - css
        -- jquery.modal.css CSS files for modals I am using in Views
        -- pure-min.css CSS framework used in all views of Chatter
    - img
        -- close.png Close icon used for modals
        -- spinner.gif Spinner gif used for modals
        -- Surf.png Home page photograph
    - js
        -- jquery.modal.min.js Modal javascript code used for modals in Chatter
        -- jquery-2.1.1.min.js jQuery used for many post and get calls
    - WEB-INF
        -- web.xml Configuration file for Chatter
    - about.html About me page
    - friends.html FriendService testing page includes all posts and get tests
    - index.html UserService testing page includes login, create and find users tests
    - tweet.html TweetService testing page includes all tweet method tests

Project Design:

All rest calls have 'rest/' appended to the url to designate rest calls from other web pages in Chatter. All 'POST'
calls use the @FormParam and all 'GET' calls use the @PathParam annotations. The project is broken up into three simple
services UserService, FriendService, and TweetService. All methods return JSON on success and a WebApplicationException
with an error message on an error.

UserService.java
    POST users/create/{user-name} - Create a user from specific user name
    GET users/{users-name} - Get a userId from a user name
    POST users/login/{userId} - Login passes a userId to set for the session

FriendService.Java
    GET friendships/incoming - Returns the users incoming friendship requests
    GET friendships/outgoing - Returns the users outgoing friendship requests
    POST friendships/create - Create a friendship requests if you'd like to accept a friendship request, send a create
    to that user id
    POST friendships/destroy - Destroys a friendship completely. Assumed this was a 'unfriend' or 'block' and not just
    an unfollow
    GET friends/list - Returns a list of userIds of people who the logged in user is following
    GET followers/list - Returns a list of userIds of people who are following the logged in user

TweetService.java
    POST tweet/tweet/{msg} - Create a tweet that is less that 128 character from passed in message
    GET tweet/show/{id} - Get a tweet from a specific id
    POST tweet/destroy/{id} - Delete a tweet from a specific id
    POST tweet/retweet/{id} - Retweet takes the tweet message, posts it again with a new tweetId and assigns the userId
    to the user who created the retweet.

Additional Rest End Points:

    POST users/login/{user-name} - Login passes a *user-name* instead of a userId because it is easier for a user to
    remember a user name then a id
    GET tweet/getTweets - Returns a list of tweet objects for a users feed (i.e. the tweets from the user or tweets from
    the people the user is following)
    POST users/logout - Invalidates the users session (Really handy for testing multiple relationships between multiple
    users)

Comments:

I truly liked this project, I find this 'full-stack' development fun and exciting. I hope to continue to develop chatter
as we cover more topics in this class and also improve my implementation. I know there are bugs in the code, and it is
not the most elegant with no AJAX calls. I would like to implement AJAX calls in the next version to add a better
user experience and also instead of returning userIds for all the tables I would really like to display user's names.

This was one of my favorite projects of my college career, I hope we continue to build on these topics and I become
a better developer of these technologies because they are definitely fun and powerful.


HAProxy Links:

http://blog.haproxy.com/2012/03/29/load-balancing-affinity-persistence-sticky-sessions-what-you-need-to-know/
https://serversforhackers.com/editions/2014/07/15/haproxy/